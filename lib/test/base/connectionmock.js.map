{"version":3,"file":"connectionmock.js","sourceRoot":"","sources":["../../../src/test/base/connectionmock.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MySql from 'mysql';\n\nimport { EventEmitter } from 'events';\nimport { MysqlError } from 'mysql';\n\nexport class ConnectionMock extends EventEmitter implements MySql.Connection {\n    private _config: MySql.ConnectionConfig = undefined;\n\n    constructor(private data: Array<any>, private shouldFail: boolean = false) {\n        super();\n    }\n\n    public set config(value) {\n        this._config = value;\n    }\n\n    public get config() {\n        return this._config;\n    }\n\n    public get state(): 'connected' | 'authenticated' | 'disconnected' | 'protocol_error' | string {\n        return 'connected';\n    }\n    \n    public get threadId(): number {\n        return 0;\n    }\n\n    public get createQuery(): MySql.QueryFunction {\n        throw new Error('Not implemented');\n    }\n\n    public beginTransaction(options?: MySql.QueryOptions, callback?: (err: MysqlError) => void): void;\n    public beginTransaction(callback: (err: MysqlError) => void): void;\n    public beginTransaction(): void {\n        throw new Error('Not implemented');\n    }\n\n    public connect(callback?: (err: MySql.MysqlError | null) => void): void {\n        throw new Error('Not implemented');\n    }\n\n    public commit(options?: MySql.QueryOptions, callback?: (err: MysqlError) => void): void;\n    public commit(callback: (err: MysqlError) => void): void;\n    public commit(): void {\n        throw new Error('Not implemented');\n    }\n\n    public changeUser(options: MySql.ConnectionOptions, callback?: (err: MysqlError) => void): void\n    public changeUser(callback: (err: MysqlError) => void): void\n    public changeUser() {\n        throw new Error('Not implemented');\n    }\n\n    public query(query: MySql.Query): MySql.Query\n    public query(sql: string, callback?: (err: MySql.MysqlError | null, results: any, fields: MySql.FieldInfo[]) => any): MySql.Query\n    public query(sql: string, values: any, callback?: (err: MySql.MysqlError | null, result: any, fields: MySql.FieldInfo[]) => any): MySql.Query\n    public query(options: MySql.QueryOptions, callback?: (err: MySql.MysqlError | null, results: any, fields: MySql.FieldInfo[]) => any): MySql.Query\n    public query(): any {\n\n        let cb: (err: MySql.MysqlError | null, result: any, fields: MySql.FieldInfo[]) => any;\n\n        switch (typeof (cb = arguments[arguments.length - 1]) == 'function') {\n            \n            case true: // callback\n                cb.call(cb,\n                    this.shouldFail ? new Error('Internal MySql error') : null,\n                    new Array<any>(...this.data.map(el => {\n                        return new RowDataPacket(el);\n                    })),\n                    Object.getOwnPropertyNames(this.data[0]).map(name => {\n                        return {\n                            catalog: undefined, // string\n                            charsetNr: undefined, // number \n                            db: undefined, // string \n                            decimals: undefined, // number \n                            default: undefined, // any\n                            flags: undefined, // number\n                            length: undefined, // number\n                            name: name,\n                            orgName: name,\n                            orgTable: undefined, // string\n                            protocol41: undefined, // boolean\n                            table: undefined, // string\n                            type: undefined, // number\n                            zerofill: undefined // boolean\n                        };\n                    })\n                )\n                break;\n\n            case false: // eventemitter\n\n                let query = new EventEmitter();\n\n                setTimeout(() => {\n                    if (this.shouldFail) {\n                        query.emit('error', new Error('Internal MySql error'));\n                    } else {\n                        query.emit('fields', Object.getOwnPropertyNames(this.data[0]).map(name => {\n                            return {\n                                catalog: undefined, // string\n                                charsetNr: undefined, // number \n                                db: undefined, // string \n                                decimals: undefined, // number \n                                default: undefined, // any\n                                flags: undefined, // number\n                                length: undefined, // number\n                                name: name,\n                                orgName: name,\n                                orgTable: undefined, // string\n                                protocol41: undefined, // boolean\n                                table: undefined, // string\n                                type: undefined, // number\n                                zerofill: undefined // boolean\n                            };\n                        }));\n\n                        for (let i = 0; i < this.data.length; i++) {\n                            query.emit('result', this.data[i]);\n                        }\n                    }\n\n                    query.emit('end', 0);\n\n                }, 10);\n\n                return query;\n        }\n    }\n\n    public ping(options?: MySql.QueryOptions, callback?: (err: MysqlError) => void): void\n    public ping(callback: (err: MysqlError) => void): void\n    public ping() {\n        throw new Error('Not implemented');\n    }\n\n    public statistics(options?: MySql.QueryOptions, callback?: (err: MysqlError) => void): void\n    public statistics (callback: (err: MysqlError) => void): void\n    public statistics () {\n        throw new Error('Not implemented');\n    }\n\n    \n    public end(callback?: (err: MySql.MysqlError | null) => void): void\n    public end(options: any, callback?: (err: MySql.MysqlError | null) => void): void\n    public end() {\n        let cb: (err: MySql.MysqlError | null) => void;\n\n        if (typeof (cb = arguments[arguments.length - 1]) == 'function') {\n            cb.call(cb, null);\n        }\n    }\n\n    public destroy(): void {\n        return;\n    }\n\n    public pause(): void {\n        return;\n    }\n\n    public resume(): void {\n        return;\n    }\n\n    public escape(value: any): string {\n        return MySql.escape(value);\n    }\n\n    public escapeId(value: string): string\n    public escapeId(values: string[]): string\n    public escapeId(): string {\n        throw new Error('Not implemented');\n    }\n\n    public format(sql: string, values?: any | any[] | { [param: string]: any }): string {\n        return MySql.format(sql, values);\n    }\n\n    public rollback(options?: MySql.QueryOptions, callback?: (err: MysqlError) => void): void;\n    public rollback(callback: (err: MysqlError) => void): void;\n    public rollback(): void {\n        throw new Error('Not implemented');\n    }\n}\n\nfunction RowDataPacket(el: Object) {\n    for (let key in el) {\n        this[key] = el[key];\n    }\n}"]}