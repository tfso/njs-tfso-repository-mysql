{"version":3,"file":"querystream.js","sourceRoot":"","sources":["../../src/db/querystream.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MySql from 'mysql';\nimport { Query } from 'tfso-repository/lib/repository/db/query';\nimport { IRecordSet, RecordSet } from 'tfso-repository/lib/repository/db/recordset';\n\nimport { WhereOperator } from 'tfso-repository/lib/linq/operators/whereoperator';\nimport { SkipOperator } from 'tfso-repository/lib/linq/operators/skipoperator';\nimport { TakeOperator } from 'tfso-repository/lib/linq/operators/takeoperator';\n\nexport abstract class QueryStream<TEntity> extends Query<TEntity> {\n    private _connection: MySql.Connection;\n\n    constructor(connection?: MySql.Connection) {\n        super();\n\n        if (connection != null)\n            this._connection = connection;\n    }\n\n    public set connection(connection: MySql.Connection) {\n        this._connection = connection;\n    }\n        \n    protected input(name: string, value: any): void\n    protected input(name: string, type: any, value: any): void\n    protected input(name: string, type: any, value?: any): void {\n        if (arguments.length == 2) {\n            value = type; type = null;\n        }\n\n        this.parameters[name] = { name: name, type: type, value: value };\n    }\n\n    protected createConnection(): MySql.Connection {\n        return this._connection;\n    }\n\n    protected executeQuery(): Promise<IRecordSet<TEntity>> {\n        return new Promise((resolve, reject) => {\n            try {\n                let query: MySql.Query,\n                    parameters = {},\n                    timed = Date.now(),\n                    error: Error = null,\n                    records: Array<TEntity> = [],\n                    predicate: (entity: TEntity) => boolean,\n                    totalRecords: number = -1,\n                    totalPredicateIterations: number = 0,\n                    affectedRecords: number = 0,\n                    changedRecords: number = 0,\n                    cancelled: boolean = false,\n                    completed: boolean = false;\n\n                let skip: number = undefined, skipped: number = 0, skipOperator: SkipOperator < TEntity > = null,\n                    take: number = undefined, taken: number = 0, takeOperator: TakeOperator<TEntity> = null;\n\n                for (let operator of this.query.operations.values()) \n                {\n                    if (operator instanceof WhereOperator)\n                    {\n                        if (predicate == null)\n                            predicate = operator.predicate;\n                        else\n                            break;\n                    }\n\n                    else if (skip == null && operator instanceof SkipOperator)\n                    {\n                        skipOperator = operator;\n                        skip = (<SkipOperator<TEntity>>operator).count;\n                    }\n\n                    else if (take == null && operator instanceof TakeOperator)\n                    {\n                        takeOperator = operator;\n                        take = (<TakeOperator<TEntity>>operator).count;\n                    }\n                }\n\n                if (skipOperator != null) this.query.operations.remove(skipOperator); // we are manually skipping, remove it from enumerable\n                if (takeOperator != null) this.query.operations.remove(takeOperator); // we are manually taking, remove it from enumerable\n\n                if (predicate == null)\n                    predicate = (entity) => true;\n\n                for (let key in this.parameters) {\n                    let param = this.parameters[key];\n\n                    parameters[param.name] = param.value;\n                }\n\n                query = this.createConnection().query(this.commandText, parameters);\n\n                query.on('fields', fields => {\n                    if (totalRecords < 0)\n                        totalRecords = -1; // reset totalRecords if it isn't set\n\n                    records.length = 0;\n                    skipped = 0;\n                    taken = 0;\n                })\n\n                query.on('result', (row, index) => {\n                    var entity: TEntity = null;\n\n                    if (cancelled)\n                        return;\n\n                    switch (row.constructor.name) {\n\n                        case 'OkPacket':\n                            affectedRecords += (<MySql.OkPacket>row).affectedRows;\n                            changedRecords += (<MySql.OkPacket>row).changedRows;\n\n                            break;\n\n                        default:\n\n                            try {\n                                if (totalRecords == -1) {\n                                    // only go here at first row in any recordset if it isn't set\n                                    if (row['pagingTotalCount'] && isNaN(row['pagingTotalCount']) == false)\n                                        totalRecords = Number(row['pagingTotalCount'])\n                                    else\n                                        totalRecords = -2;\n                                }\n\n                                if (completed == false || (completed == true && skip != null)) { // if completed and query is trying to get paging total count we have to count them as predicate will narrow down result even more\n                                    entity = this.transform(row);                                \n\n                                    if (predicate(entity) === true) {\n                                        if (skip == null || ++skipped > skip) {\n                                            if (take == null || ++taken <= take)\n                                                records.push(entity);\n                                            else\n                                                completed = true;\n                                        }\n\n                                        totalPredicateIterations++;\n                                    }\n                                }\n                            }\n                            catch (ex) {\n                                cancelled = true;\n                                error = ex;\n                            }\n                    }\n                })\n\n                query.on('error', err => {\n                    error = err;\n                })\n\n                query.on('end', () => {\n                    if (error != null)\n                        reject(error);\n                    else\n                        resolve(new RecordSet(records, changedRecords || affectedRecords, (Date.now() - timed), skip != null ? totalPredicateIterations : (totalRecords >= 0 ? totalRecords : undefined)));\n                })\n\n            }\n            catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    protected abstract transform(record: any): TEntity;\n}\n\nexport default QueryStream\n\nexport { RecordSet }"]}